{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Basic Data Types\n",
    "\n",
    "### List comprehesions\n",
    "\n",
    "<hr />\n",
    "\n",
    "### Lists\n",
    "Write a chunk of code which takes in list commands with the corresponding arguments and evaluates them. First line is the number of such commands, following commands come each in a new line.\n",
    "**Constraints**: arguments should be integers"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "12\n",
      "insert 0 5\n",
      "insert 1 10\n",
      "insert 0 6\n",
      "print\n",
      "[6, 5, 10]\n",
      "remove 6\n",
      "append 9\n",
      "append 1\n",
      "sort\n",
      "print\n",
      "[1, 5, 9, 10]\n",
      "pop\n",
      "reverse\n",
      "print\n",
      "[9, 5, 1]\n"
     ]
    }
   ],
   "source": [
    "# read the first line: N\n",
    "N = int(input())\n",
    "\n",
    "# later manipulate this empty list\n",
    "l = []\n",
    "\n",
    "for n in range(N):\n",
    "    input_line = input().split()\n",
    "    command = input_line[0]\n",
    "    args = input_line[1:]\n",
    "    if command != 'print':\n",
    "        command += '(' + ','.join(args) + ')'\n",
    "        eval('l.' + command)\n",
    "    else:\n",
    "        print(l)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### What I learnt:\n",
    "\n",
    "1. Each call of <mark>input()</mark> in code chunk reads a new line in the actual *raw* <mark>input()</mark>\n",
    "2. Join elements of list into a string with some character: <mark>','.join(args)</mark>\n",
    "3. Split string into multiple arguments stored in a list: <mark>str.split()</mark>\n",
    "4. <mark>eval()</mark> evaluates a string as a python code\n",
    "\n",
    "<hr/>\n",
    "\n",
    "### Tuples\n",
    "Given an integer, *n*, and *n* space-separated integers as input, create a tuple, *t*, of those *n* integers. Then compute and print the result of *hash()*."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "3\n",
      "1 2 3\n",
      "2528502973977326415\n"
     ]
    }
   ],
   "source": [
    "if __name__ == '__main__':\n",
    "    n = int(input())\n",
    "    t = tuple(int(i) for i in input().split())\n",
    "    print(hash(t))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### What I learnt:\n",
    "1. Tuple is an unmutable list\n",
    "2. Convert tuple into a list easily: <mark>tuple(list)</mark>\n",
    "3. Use list comprehensions for quicker change of mode of arguments of a list\n",
    "4. <mark>hash(t)</mark> returns hash value of any python object\n",
    "\n",
    "<hr/><hr/><hr/>\n",
    "\n",
    "# Strings\n",
    "\n",
    "### Designer Door Mat\n",
    "Design a door mat with the following specifications:\n",
    "- Mat size must be N*M (N is *odd* number, and M = 3*N)\n",
    "- The design should write welcome in the center\n",
    "- The desing should use only <mark>|</mark>, <mark>,</mark>, <mark>.</mark> and <mark>-</mark> characters"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "9 27\n",
      "------------.|.------------\n",
      "---------.|..|..|.---------\n",
      "------.|..|..|..|..|.------\n",
      "---.|..|..|..|..|..|..|.---\n",
      "----------WELCOME----------\n",
      "---.|..|..|..|..|..|..|.---\n",
      "------.|..|..|..|..|.------\n",
      "---------.|..|..|.---------\n",
      "------------.|.------------\n"
     ]
    }
   ],
   "source": [
    "values = [int(i) for i in input().split()]\n",
    "N = values[0]\n",
    "M = values[1]\n",
    "\n",
    "# check the constraints\n",
    "assert 5 < N < 101, 'Enter a valid N value!'\n",
    "assert 15 < M < 303, 'Enter a valid M value!'\n",
    "assert M == 3*N, 'M should be 3 times N'\n",
    "assert N % 2 == 1, 'N and M should be odd!'\n",
    "\n",
    "# save the repeating string\n",
    "mid_part = '.|.'\n",
    "\n",
    "for i in range(1, N+1):\n",
    "    mid = int((N+1) / 2) #middle line\n",
    "    \n",
    "    if i == mid:\n",
    "        dash_size = int((M-7) / 2)\n",
    "        print('-'*dash_size + 'WELCOME' + '-'*dash_size)\n",
    "    else:\n",
    "        if i < mid:\n",
    "            dash_size = int((M - 3*(2*i - 1)) / 2)\n",
    "            print('-'*dash_size + mid_part*(2*i-1) + '-'*dash_size)\n",
    "        else:\n",
    "            if i == (mid+1):\n",
    "                reverse = mid - 1\n",
    "            else:\n",
    "                reverse -= 1\n",
    "            dash_size = int((M - 3*(2*reverse-1)) / 2)\n",
    "            print('-'*dash_size + mid_part*(2*reverse-1) + '-'*dash_size)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### What I learnt:\n",
    "1. Constraints can be checked using <mark>assert expression, error message </mark>\n",
    "2. <mark>%</mark> is a modulus operator \n",
    "3. Both /, // divisions return *float*\n",
    "4. String <mark>cannot</mark> be multiplied by FLOATS. Only **integers**!\n",
    "\n",
    "<hr/>\n",
    "\n",
    "### Alphabet Rangioli\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Given an integer *N*, print an alphabet rangioli of size *N*."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "abcdefghijklmnopqrstuvwxyz\n"
     ]
    }
   ],
   "source": [
    "import string\n",
    "print(string.ascii_lowercase)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
